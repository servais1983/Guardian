#!/usr/bin/env python3
"""
Test de S√©curit√© GUARDIAN
Validation des corrections de vuln√©rabilit√©s
"""

import os
import sys
import json
from secure_config import SecureConfig
from input_validation import InputValidator

def test_secure_config():
    """Test de la configuration s√©curis√©e"""
    print("üîê TEST CONFIGURATION S√âCURIS√âE")
    print("-" * 40)
    
    # Test du module de configuration s√©curis√©e
    secure_config = SecureConfig()
    
    # Test de chiffrement/d√©chiffrement
    test_value = "test_api_key_12345"
    encrypted = secure_config.encrypt_value(test_value)
    decrypted = secure_config.decrypt_value(encrypted)
    
    if test_value == decrypted:
        print("‚úÖ Chiffrement/d√©chiffrement fonctionnel")
    else:
        print("‚ùå Erreur chiffrement/d√©chiffrement")
        return False
    
    # Test de validation d'API key
    valid_key = "a" * 64  # Cl√© VirusTotal valide
    invalid_key = "short"
    
    print(f"Test cl√© VirusTotal: {valid_key[:10]}... (longueur: {len(valid_key)})")
    result = secure_config.validate_api_key(valid_key, 'virustotal')
    print(f"R√©sultat validation: {result}")
    if result:
        print("‚úÖ Validation API key fonctionnelle")
    else:
        print("‚ùå Erreur validation API key")
        return False
    
    if not secure_config.validate_api_key(invalid_key, 'virustotal'):
        print("‚úÖ Rejet des cl√©s API invalides")
    else:
        print("‚ùå Erreur: cl√© invalide accept√©e")
        return False
    
    # Test avec une cl√© valide pour abuseipdb
    valid_abuseipdb_key = "a" * 32
    print(f"Test cl√© AbuseIPDB: {valid_abuseipdb_key[:10]}... (longueur: {len(valid_abuseipdb_key)})")
    if secure_config.validate_api_key(valid_abuseipdb_key, 'abuseipdb'):
        print("‚úÖ Validation abuseipdb fonctionnelle")
    else:
        print("‚ùå Erreur validation abuseipdb")
        return False
    
    return True

def test_input_validation():
    """Test de la validation d'entr√©es"""
    print("\nüõ°Ô∏è TEST VALIDATION D'ENTR√âES")
    print("-" * 40)
    
    validator = InputValidator()
    
    # Test validation IP
    valid_ips = ["192.168.1.1", "10.0.0.1", "::1"]
    invalid_ips = ["256.256.256.256", "invalid", "192.168.1.256"]
    
    for ip in valid_ips:
        if not validator.validate_ip_address(ip):
            print(f"‚ùå IP valide rejet√©e: {ip}")
            return False
    
    for ip in invalid_ips:
        if validator.validate_ip_address(ip):
            print(f"‚ùå IP invalide accept√©e: {ip}")
            return False
    
    print("‚úÖ Validation d'adresses IP fonctionnelle")
    
    # Test validation r√©seau
    valid_networks = ["192.168.1.0/24", "10.0.0.0/8"]
    invalid_networks = ["invalid", "192.168.1.0/33"]
    
    for network in valid_networks:
        if not validator.validate_network_range(network):
            print(f"‚ùå R√©seau valide rejet√©: {network}")
            return False
    
    for network in invalid_networks:
        if validator.validate_network_range(network):
            print(f"‚ùå R√©seau invalide accept√©: {network}")
            return False
    
    print("‚úÖ Validation de r√©seaux fonctionnelle")
    
    # Test nettoyage de cha√Ænes
    dangerous_inputs = [
        "<script>alert('xss')</script>",
        "javascript:alert('xss')",
        "file:///etc/passwd",
        "../../../etc/passwd"
    ]
    
    for dangerous in dangerous_inputs:
        sanitized = validator.sanitize_string(dangerous)
        if sanitized:
            print(f"‚ùå Entr√©e dangereuse non nettoy√©e: {dangerous}")
            return False
    
    print("‚úÖ Nettoyage d'entr√©es dangereuses fonctionnel")
    
    return True

def test_configuration_security():
    """Test de la s√©curit√© de configuration"""
    print("\n‚öôÔ∏è TEST S√âCURIT√â CONFIGURATION")
    print("-" * 40)
    
    validator = InputValidator()
    
    # Configuration de test
    test_config = {
        "target_networks": ["192.168.1.0/24", "10.0.0.0/8"],
        "critical_ports": [80, 443, 22, 99999],  # Port invalide
        "threat_intel": {
            "virustotal_api_key": "a" * 64,  # Valide
            "abuseipdb_api_key": "short"  # Invalide
        }
    }
    
    results = validator.validate_config(test_config)
    
    if results['errors']:
        print("‚ö†Ô∏è  Erreurs d√©tect√©es:")
        for error in results['errors']:
            print(f"  - {error}")
    
    if results['warnings']:
        print("‚ö†Ô∏è  Avertissements:")
        for warning in results['warnings']:
            print(f"  - {warning}")
    
    # V√©rification que les erreurs sont bien d√©tect√©es
    expected_errors = ["Port invalide: 99999", "Cl√© API invalide pour abuseipdb"]
    for expected in expected_errors:
        if not any(expected in error for error in results['errors']):
            print(f"‚ùå Erreur attendue non d√©tect√©e: {expected}")
            return False
    
    print("‚úÖ Validation de configuration fonctionnelle")
    return True

def test_file_permissions():
    """Test des permissions de fichiers"""
    print("\nüìÅ TEST PERMISSIONS DE FICHIERS")
    print("-" * 40)
    
    sensitive_files = [
        "guardian_config_sample.json",
        "secure_config.py",
        ".vscode/settings.json"
    ]
    
    for file_path in sensitive_files:
        if os.path.exists(file_path):
            # V√©rification que le fichier n'est pas accessible en √©criture par tous
            if os.access(file_path, os.W_OK):
                print(f"‚ö†Ô∏è  Fichier sensible accessible en √©criture: {file_path}")
            else:
                print(f"‚úÖ Fichier s√©curis√©: {file_path}")
        else:
            print(f"‚ÑπÔ∏è  Fichier non trouv√©: {file_path}")
    
    return True

def main():
    """Fonction principale de test"""
    print("üõ°Ô∏è TESTS DE S√âCURIT√â GUARDIAN")
    print("=" * 50)
    
    tests = [
        test_secure_config,
        test_input_validation,
        test_configuration_security,
        test_file_permissions
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
            else:
                print(f"‚ùå Test √©chou√©: {test.__name__}")
        except Exception as e:
            print(f"‚ùå Erreur dans le test {test.__name__}: {e}")
    
    print(f"\nüìä R√âSULTATS: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("‚úÖ Tous les tests de s√©curit√© sont pass√©s!")
        return 0
    else:
        print("‚ùå Certains tests de s√©curit√© ont √©chou√©")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 